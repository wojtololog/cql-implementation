PARSER_BEGIN(CQLParser)
import model.SensorData;

import java.io.Reader;
import java.io.StringReader;
import java.util.*;
import java.util.stream.Stream;
import java.util.stream.Collectors;

public class CQLParser {
	private Stream<SensorData> inputDataStream;
	private List<Token> selectionTokenList;
	private List<Token> aggregationselectionTokenList;
	private List<Token> firstConditionselectionTokenList;
	private	boolean isTokenStarOnList;
	
    public CQLParser(String query, Stream<SensorData> sensorDataStream){
        this((Reader)(new StringReader(query)));
		this.inputDataStream = sensorDataStream;
		
    }
	
	private long fromWindowTokenToLong(Token windowToken) {
		String windowTokenValue = windowToken.image;
		String[] splittedTable = windowTokenValue.split(" ");
        String numberToSubstring = splittedTable[1];
		String number = numberToSubstring.substring(0, numberToSubstring.length() - 1);
		return Long.parseLong(number);
	}
	
	private Stream<SensorData> selectionRules(Token windowToken) {
		long windowSize = fromWindowTokenToLong(windowToken);
                String[] tokenValues = new String[3];
                List<Token> tokenList;
                if(selectionTokenList.isEmpty()) {
                    tokenList = aggregationselectionTokenList;
                } else {
                    tokenList = selectionTokenList;
                }
                if(!isTokenStarOnList) {
                        if(tokenList.size() == 3) {
                            for(int i = 0; i < tokenList.size(); i++) {
                                tokenValues[i] = tokenList.get(i).image;
                            }
                             

                        }
                        if(tokenList.size() == 2) {
                                for(int i = 0; i < tokenList.size(); i++) {
                                        tokenValues[i] = tokenList.get(i).image;
                                }
                             
                        }
                        else if(tokenList.size() == 1) {
                                tokenValues[0] = tokenList.get(0).image;
                             
                        }
                } else {
                     
                }
                return null;
	}
	
	private Stream<SensorData> conditionRules(List<Token> firstConditionselectionTokenList, Stream<SensorData> selectionStream) {
		String filteringCondition = firstConditionselectionTokenList.get(0).image;
		String numberString = firstConditionselectionTokenList.get(1).image;
        double filteringNumber = Double.valueOf(numberString);
		
		switch(filteringCondition) {
		case ">":
			
		case "<":	
			
		case "<=":	
			
		case ">=":	
			
		default:
			return null;
		}	
	}
	
	private Stream<SensorData> aggregateStream(Stream<SensorData> streamToAggregate) {
		
	}
}
PARSER_END(CQLParser)
SKIP :
{
        " "
        | "\t"
        | "\r"
        | "\n"
}
TOKEN: /*RESERVED TOKENS FOR UQL */
{
           <SELECT: "SELECT" | "select">
        |  <STAR:  "*">
        |  <FROM: "FROM" | "from">
        |  <WHERE: "WHERE" | "where">
		|  <AND: "AND" | "and">
		|  <OR: "OR" | "or">
        |  <AVG: "AVG" | "avg">
        |  <SUM: "SUM" | "sum">
        |  <LPAREN: "(">
        |  <RPAREN: ")">
        |  <EQUALS: "=">
        |  <COMMA: ",">
        |  <LOWER: "<">
		|  <GRATER: ">">
		|  <LESSEREQUAL: "<=">
		|  <GRATEREQUAL: ">=">
		|  <WINDOW: "[RANGE " (["0"-"9"])+"]">
		|  <NUMBER: (["0"-"9"])+>
        |  <STRING: (["A"-"Z", "a"-"z", "0"-"9"])+ >
        |  <QUOTED_STRING: "\"" (~["\""])+ "\"" >
}

Stream<SensorData> parse() :
{
	Stream<SensorData> selectionStream = null;
	Stream<SensorData> fromWhereStream = null;
	Stream<SensorData> aggregationStream = null;
}
{            
	selectionStream = selection() fromWhere() (fromWhereStream = withCondition(selectionStream))? <EOF>
	{
		if(aggregationselectionTokenList.isEmpty()) {
			if(fromWhereStream == null) {
				return selectionStream;
			} else {
				return fromWhereStream; 
			}
		} else {
			if(fromWhereStream == null) {
				aggregationStream = aggregateStream(selectionStream);
				return aggregationStream;
			} else {
				aggregationStream = aggregateStream(fromWhereStream);
				return aggregationStream; 
			}
		}
		return null;
	}
}

Stream<SensorData> selection() :
{
	Stream<SensorData> selectionStream;
	Token windowToken;
}
{
    <SELECT> windowToken=<WINDOW> attr() { selectionStream = selectionRules(windowToken); }
	{ return selectionStream; }
}

void attr() :
{
	Token token;
}
{
    (
	aggregation() | token=<STAR> { isTokenStarOnList = true; } | token=<STRING> { selectionTokenList.add(token); }		
	)?
    (<COMMA> attr())*
}


void aggregation() :
{
	Token token;
}
{
	<AVG> <LPAREN> token=<STRING> { aggregationselectionTokenList.add(token); } <RPAREN>
}
void fromWhere() :
{
}
{
	<FROM> <STRING>
}
Stream<SensorData> withCondition(Stream<SensorData> selectionStream) :
{
	Stream<SensorData> conditionStream;
}
{
	<WHERE> {firstConditionselectionTokenList = condition();}
	{ 
	  conditionStream = conditionRules(firstConditionselectionTokenList, selectionStream);
	  return conditionStream;
	}
}
List<Token> condition() :
{
	Token token;
	List<Token> conditionTokens;
}
{
	<STRING> (token=<LOWER> {conditionTokens.add(token);} | token=<GRATER> {conditionTokens.add(token);} | token=<LESSEREQUAL> {conditionTokens.add(token);} | token=<GRATEREQUAL> {conditionTokens.add(token);}) token=<NUMBER> {conditionTokens.add(token);}
	{ return conditionTokens; }
}